library(FNN)
library(rpart)
install.packages("twitteR")
library(twitteR)
library(twitteR)
library(ROAuth)
install.packages("twitteR")
library('twitteR')
install.packages('twitteR')
install.packages(c("plyr", "tree"))
install.packages("twitteR")
install.packages("twitteR", dependencies = FALSE)
install.packages("ROAuth")
install.packages("RCurl")
data <- load('~/Downloads/GreenwichLondonAirQuality.csv')
data <- read.csv('~/Downloads/GreenwichLondonAirQuality.csv')
View(data)
plot(data$ReadingDateTime, data$Value)
data$Value[1:3]
plot(data$ReadingDateTime[1:5], data$Value[1:5])
plot([1:5], data$Value[1:5])
plot(c(1,2,3,4,5), data$Value[1:5])
c([1:100])
[1:100]
c[1:100]
c(1:100)
plot(c(1:1000), data$Value[1:1000])
data <- read.csv2("~/Downloads/usdhkd_1_2007-06-20_2014-05-02.csv", header=T)
View(data)
data <- read.csv2("~/Downloads/usdhkd_1_2007-06-20_2014-05-02.csv", header=F, sep=",")
View(data)
setwd("~/R/Learn-R/Data Management")
source('data.R')
source('data.R')
View(leadership)
leadership$age[leadership$age== 99] <- NA
View(leadership)
View(leadership)
leadership$agecat[leadership$age > 75] <- "Elder"
leadership$agecat[leadership$age >= 55 & leadership$age <= 75] <- "Middle Aged"
leadership$agecat[leadership$age < 55] <- "Young"
View(leadership)
leadership <- within(leadership,{
agecat <- NA
agecat[age > 75] <- "Elder"
agecat[age >= 55 & age <= 75] <- "Middle Aged"
agecat[age < 55] <- "Young"
}
)
source('ConvertVariables.R')
source('ConvertVariables.R')
fix(leadership)
View(leadership)
library(reshape)
install.packages("reshape")
library(reshape)
leadership <- rename(leadership,
c(manager="managerID", date="testDate")
)
View(leadership)
names(leadership)[2] <- "testDate"
names(leadership)[6:10] <- c("item1", "item2", "item3", "item4", "item5")
View(leadership)
source('RenameVariables.R')
y <- c(1, 2, 3, NA)
# тогда команда
is.na(y)
is.na(leadership[,6:10])
x <- c(1, 2, NA, 3)
y <- x[1] + x[2] + x[3] + x[4]
z <- sum(x)
z
x <- c(1, 2, NA, 3)
y <- sum(x, na.rm=TRUE)
newdata <- na.omit(leadership)
View(newdata)
mydates <- as.Date(c("2007-06-22", "2004-02-13"))
mydates
strDates <- c("01/05/1965", "08/16/1975"
dates <- as.Date(strDates, "%m/%d/%Y")
strDates <- c("01/05/1965", "08/16/1975")
dates <- as.Date(strDates, "%m/%d/%Y")
strDates <- c("01/05/1965", "08/16/1975")
dates <- as.Date(strDates, "%m/%d/%Y")
source('EmptyValues.R')
myformat <- "%m/%d/%y"
leadership$date <- as.Date(leadership$date, myformat)
View(leadership)
source('data.R')
mydates <- as.Date(c("2007-06-22", "2004-02-13"))
# преобразует текстовые данные в даты, используя этот формат по умолчанию.
# А этот программный код:
strDates <- c("01/05/1965", "08/16/1975")
dates <- as.Date(strDates, "%m/%d/%Y")
# читает даты в формате “месяц-день-год”.
# В нашей таблице данных о лояльности менеджеров к начальству даты представлены в
# формате “месяц-день-две последние цифры года”. Так что команды
myformat <- "%m/%d/%y"
leadership$date <- as.Date(leadership$date, myformat)
View(leadership)
Sys.Date()
date()
today <- Sys.Date()
format(today, format="%B %d %Y")
format(today, format="%A")
startdate <- as.Date("2004-02-13")
enddate <- as.Date("2011-01-22")
days <- enddate - startdate
days
today <- Sys.Date()
dob <- as.Date("1956-10-12")
difftime(today, dob, units="weeks")
strDates <- as.character(dates)
a <- c(1,2,3)
a
is.numeric(a)
is.vector(a)
a <- as.character(a)
a
is.numeric(a)
is.vector(a)
is.character(a)
source('data.R')
newdata <- leadership[order(leadership$age),]
attach(leadership)
newdata <- leadership[order(gender, age),]
detach(leadership)
View(newdata)
attach(leadership)
newdata <-leadership[order(gender, -age),]
detach(leadership)
View(newdata)
source('data.R')
source('data.R')
mysample <- leadership[sample(1:nrow(leadership), 3, replace=FALSE),]
View(mysample)
mysample <- leadership[sample(1:nrow(leadership), 3, replace=FALSE),]
View(mysample)
mtcars
library(sqldf)
install.packages("sqldf")
library(sqldf)
newdf <- sqldf("select * from mtcars where carb=1 order by mpg", row.names=TRUE)
View(newdf)
sqldf("select avg(mpg) as avg_mpg, avg(disp) as avg_disp, gear from mtcars
where cyl in (4, 6) group by gear")
setwd("~/R/Learn-R/Data Management Extended")
x <- c(1,2,3,4,5,6,7,8)
mean(x)
sd(x)
n <- length(x)
meanx <- sum(x)/n
css <- sum((x - meanx)^2)
sdx <- sqrt(css / (n-1))
meanx
sdx
x <- pretty(c(-3,3), 30)
y <- dnorm(x)
plot(x, y, type = "l", xlab = "Normal Deviate", ylab = "Density", yaxs = "i")
pnorm(1.96) # равно 0.975
qnorm(.9, mean=500, sd=100) # равно 628.16
rnorm(50, mean=50, sd=10)
runif(5)
runif(5)
set.seed(1234)
runif(5)
set.seed(1234)
runif(5)
# Установив начальное число вручную, вы можете получать воспроизводимые результаты. Это может
# пригодиться при создании примеров, к которым вы и другие люди будете возвращаться
# впоследствии.
mydata <- matrix(rnorm(30), nrow=6) # Генерируем данные
mydata
options(digits=2)
Student <- c("John Davis", "Angela Williams", "Bullwinkle Moose",
"David Jones", "Janice Markhammer", "Cheryl Cushing",
"Reuven Ytzrhak", "Greg Knox", "Joel England",
"Mary Rayburn")
Math <- c(502, 600, 412, 358, 495, 512, 410, 625, 573, 522)
Science <- c(95, 99, 80, 82, 75, 85, 80, 95, 89, 86)
English <- c(25, 22, 18, 15, 20, 28, 15, 30, 27, 18)
roster <- data.frame(Student, Math, Science, English, stringsAsFactors=FALSE)
View(roster)
z <- scale(roster[,2:4]) # Вычисляем объединенный показатель успеваемости
score <- apply(z, 1, mean)
View(z)
roster <- cbind(roster, score)
View(roster)
y <- quantile(score, c(.8,.6,.4,.2)) # Оцениваем студентов
y
roster$grade[score >= y[1]] <- "A"
roster$grade[score < y[1] & score >= y[2]] <- "B"
roster$grade[score < y[2] & score >= y[3]] <- "C"
roster$grade[score < y[3] & score >= y[4]] <- "D"
roster$grade[score < y[4]] <- "F"
View(roster)
name <- strsplit((roster$Student), " ") # Извлекаем фамилии и имена
lastname <- sapply(name, "[", 2)
firstname <- sapply(name, "[", 1)
roster <- cbind(firstname,lastname, roster[,-1])
roster <- roster[order(lastname,firstname),] # Сортируем по фамилиям и именам
roster
View(roster)
View(z)
for (i in 1:10) print("Hello")
i <- 10
while (i > 0) {
print("Hello");
i <- i - 1
}
grade
if (is.character(grade))
grade <- as.factor(grade)
grade <- "aaa"
if (is.character(grade))
grade <- as.factor(grade)
if (!is.factor(grade))
grade <- as.factor(grade)
else print("Grade already is a factor")
if (!is.factor(grade)) {
grade <- as.factor(grade)
} else {
print("Grade already is a factor")
}
score <- 0.3
ifelse(score > 0.5, print("Сдал"), print("Провалился"))
outcome <- ifelse (score > 0.5, "Провалился", "Сдал")
outcome <- ifelse (score > 0.5, "Сдал", "Провалился")
чувства <- c("печаль", "страх")
for (i in чувства)
print(
switch(i,
счастье = "Я рад, что ты счастлив",
страх = "Тут нечего бояться",
печаль
= "Приободрись",
злость = "Успокойся"
)
)
mystats <- function(x, parametric=TRUE, print=FALSE) {
if (parametric) {
center <- mean(x);
spread <- sd(x)
} else {
center <- median(x);
spread <- mad(x)
}
if (print & parametric) {
cat("Mean=", center, "\n", "SD=", spread, "\n")
} else if (print & !parametric) {
cat("Median=", center, "\n", "MAD=", spread, "\n")
}
result <- list(center=center, spread=spread)
return(result)
}
set.seed(1234)
x <- rnorm(500)
y <- mystats(x, print=T)
mydate <- function(type="long") {
switch(type,
long = format(Sys.time(), "%A %B %d %Y"),
short = format(Sys.time(), "%m-%d-%y"),
cat(type, "это неизвестный формат\n")
)
}
mydate("long")
mydate("short")
cat ("Раз", " ", "Два")
cars <- mtcars[1:5,1:4]
cars
t(cars)
options(digits=3)
attach(mtcars)
aggdata <-aggregate(mtcars, by=list(cyl,gear), FUN=mean, na.rm=TRUE)
aggdata
detach(mtcars)
install.packages("reshape")
library(reshape)
ID <- c(1,1,2,2)
Time <- c(1,2,1,2)
X1 <- c(5,3,6,2)
X2 <- c(6,5,1,4)
mydata <- data.frame(ID, Time, X1, X2)
View(mydata)
md <- melt(mydata, id=(c("id", "time")))
md <- melt(mydata, id=(c("ID", "Time")))
View(md)
cast(md, ID~variable, mean)
cast(md, ID~Time, mean)
cast(md, ID+Time~variable)
cast(md, ID+variable~Time)
cast(md, ID~variable+Time)
library(vcd)
install.packages("vcd")
setwd("~/R/Learn-R/Diagrams/Barplot")
source('../vcd_data.R')
View(Arthritis)
source('../vcd_data.R')
counts <- table(Arthritis$Improved)
counts
barplot(counts,
main="Simple Bar Plot",
xlab="Improvement", ylab="Frequency")
barplot(counts,
main="Horizontal Bar Plot",
xlab="Frequency", ylab="Improvement",
horiz=TRUE)
?barplot
source('../vcd_data.R')
counts <- table(Arthritis$Improved, Arthritis$Treatment)
counts
rownames(counts)
barplot(counts,
main="Stacked Bar Plot",
xlab="Treatment", ylab="Frequency",
col=c("red", "yellow","green"),
legend=rownames(counts))
barplot(counts,
main="Grouped Bar Plot",
xlab="Treatment", ylab="Frequency",
col=c("red", "yellow", "green"),
legend=rownames(counts), beside=TRUE)
state.x77
state.region
states <- data.frame(state.region, state.x77)
View(states)
means <- aggregate(states$Illiteracy, by=list(state.region), FUN=mean)
View(means)
means <- means[order(means$x),] # Сортируем средние значения по возрастанию
View(means)
barplot(means$x, names.arg=means$Group.1)
title("Mean Illiteracy Rate")
par(mar=c(5,8,4,2))
par(las=2)counts <- table(Arthritis$Improved)
barplot(counts,
)
par(mar=c(5,8,4,2))
par(las=2)
counts <- table(Arthritis$Improved)
barplot(counts,
main="Treatment Outcome",
horiz=TRUE, cex.names=0.8,
names.arg=c("No Improvement", "Some Improvement","Marked Improvement")
)
source('../vcd_data.R')
library(vcd)
attach(Arthritis)
counts <- table(Treatment, Improved)
spine(counts, main="Spinogram Example")
detach(Arthritis)
setwd("~/R/Learn-R/Diagrams/Circle")
source('../vcd_data.R')
library(vcd)
attach(Arthritis)
counts <- table(Treatment, Improved)
spine(counts, main="Spinogram Example")
detach(Arthritis)
par(mfrow=c(2, 2))
slices <- c(10, 12, 4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pie(slices, labels = lbls, main="Simple Pie Chart")
pct <- round(slices/sum(slices)*100)
lbls2 <- paste(lbls, " ", pct, "%", sep="")
pie(slices, labels=lbls2, col=rainbow(length(lbls2)),
main="Pie Chart with Percentages")
library(plotrix)
install.packages("plotrix")
pie3D(slices, labels=lbls,explode=0.1, main="3D Pie Chart ")
library(plotrix)
pie3D(slices, labels=lbls,explode=0.1, main="3D Pie Chart ")
mytable <- table(state.region)
lbls3 <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls3, main="Pie Chart from a Table\n (with sample sizes)")
library(plotrix)
slices <- c(10, 12, 4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
fan.plot(slices, labels = lbls, main="Fan Plot")
setwd("~/R/Learn-R/Diagrams/Histogram")
par(mfrow=c(2,2))
hist(mtcars$mpg)
hist(mtcars$mpg, breaks=12,
col="red", xlab="Miles Per Gallon",
main="Colored histogram with 12 bins")
hist(mtcars$mpg, freq=FALSE, breaks=12,
col="red", xlab="Miles Per Gallon",
main="Histogram, rug plot, density curve")
rug(jitter(mtcars$mpg))
lines(density(mtcars$mpg), col="blue", lwd=2)
x <- mtcars$mpg
h<-hist(x, breaks=12,
col="red", xlab="Miles Per Gallon",
main="Histogram with normal curve and box")
xfit<-seq(min(x), max(x), length=40)
yfit<-dnorm(xfit, mean=mean(x), sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
box()
setwd("~/R/Learn-R/Diagrams/KernelDencity")
View(mtcars$mpg)
par(mfrow=c(2,1))
d <- density(mtcars$mpg)
plot(d)
d <- density(mtcars$mpg)
plot(d, main="Kernel Density of Miles Per Gallon")
polygon(d, col="red", border="blue")
rug(mtcars$mpg, col="brown")
setwd("~/R/Learn-R/Diagrams/KernelDensity")
par(lwd=2)
library(sm)
install.packages("sm")
library(sm)
attach(mtcars)
cyl.f <- factor(cyl, levels= c(4,6,8),
labels = c("4 cylinder", "6 cylinder", "8 cylinder")
)
sm.density.compare(mpg, cyl, xlab="Miles Per Gallon")
title(main="MPG Distribution by Car Cylinders")
colfill<-c(2:(1+length(levels(cyl.f))))
legend(locator(1), levels(cyl.f), fill=colfill)
detach(mtcars)
par(lwd=2)
library(sm)
attach(mtcars)
# Создаем фактор с номером группы
cyl.f <- factor(cyl, levels= c(4,6,8),
labels = c("4 cylinder", "6 cylinder", "8 cylinder")
)
# Отображаем плотности распределения точек
sm.density.compare(mpg, cyl, xlab="Miles Per Gallon")
title(main="MPG Distribution by Car Cylinders")
colfill<-c(2:(1+length(levels(cyl.f))))
# Добавляем легенду по щелчку мыши
legend(locator(1), levels(cyl.f), fill=colfill)
detach(mtcars)
par(mfrow=c(2,1))
d <- density(mtcars$mpg)
plot(d)
d <- density(mtcars$mpg)
plot(d, main="Kernel Density of Miles Per Gallon")
polygon(d, col="red", border="blue")
rug(mtcars$mpg, col="brown")
setwd("~/R/Learn-R/Diagrams/Boxplot")
boxplot(mtcars$mpg, main="Box plot", ylab="Miles per Gallon")
min(mtcars$mpg)
max(mtcars$mpg)
median(mtcars$mpg)
mean(mtcars$mpg)
boxplot.stats(mtcars$mpg)
boxplot(mpg ~ cyl, data=mtcars, main="Car Mileage Data",
xlab="Number of Cylinders",
ylab="Miles Per Gallon"
)
boxplot(mpg ~ cyl, data=mtcars, notch=TRUE, varwidth=TRUE, col="red",
main="Car Mileage Data",
xlab="Number of Cylinders",
ylab="Miles Per Gallon"
)
View(mtcars$am)
mtcars$cyl.f <- factor(mtcars$cyl, levels=c(4,6,8), labels=c("4","6","8"))
mtcars$am.f <- factor(mtcars$am, levels=c(0,1), labels=c("auto", "standard"))
boxplot(mpg ~ am.f * cyl.f, data=mtcars, varwidth=TRUE,
col=c("gold","darkgreen"),
main="MPG Distribution by Auto Type",
xlab="Auto Type"
)
library(vioplot)
install.packages("vioplot")
library(vioplot)
x1 <- mtcars$mpg[mtcars$cyl==4]
x2 <- mtcars$mpg[mtcars$cyl==6]
x3 <- mtcars$mpg[mtcars$cyl==8]
vioplot(x1, x2, x3, names=c("4 cyl", "6 cyl", "8 cyl"), col="gold")
title("Violin Plots of Miles Per Gallon")
setwd("~/R/Learn-R/Diagrams/Dotplot")
dotchart(mtcars$mpg, labels=row.names(mtcars), cex=.7,
main="Gas Mileage for Car Models",
xlab="Miles Per Gallon"
)
x <- mtcars[order(mtcars$mpg),]
x$cyl <- factor(x$cyl)
x$color[x$cyl==4] <- "red"
x$color[x$cyl==6] <- "blue"
x$color[x$cyl==8] <- "darkgreen"
dotchart(x$mpg, labels = row.names(x), cex=.7, groups = x$cyl,
gcolor = "black", color = x$color, pch=19,
main = "Gas Mileage for Car Models\ngrouped by cylinder",
xlab = "Miles Per Gallon"
)
